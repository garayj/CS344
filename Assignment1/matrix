#!/bin/bash
trap "rm -f *.jgtmp; echo 'CTRL+C received, exiting'; exit 1" INT HUP TERM
############################################################
#                        HELPERS                           #
############################################################
# Get dimensions of matrix.
function _getDims() {
    dims $1 >"dimensions-$$.jgtmp"
    read rows columns <"dimensions-$$.jgtmp"
}

# Takes 2 arguments, the number of columns in the matrix
# and an array with all values in the matrix and prints
# out the matrix to the terminal in the correct format.
function _displayMatrix() {
    outputFile='output.jgtmp'
    columns=$1
    shift
    arr=("$@")

    # Loop through all values in the array.
    for ((n = 0; n < ${#arr[@]}; n++)); do

        # Check if the file exists.
        if [ -f $outputFile ]; then

            # If the file exists and isn't at the end of
            # a row, append the value at arr[n] to the
            # output file along with a tab.
            if [ $((($n + 1) % $columns)) != 0 ]; then
                printf "%d\t" ${arr[$n]} >>$outputFile

            # Else, append the value of arr[n] to the
            # output file along with a new line.
            else
                printf "%d\n" ${arr[$n]} >>$outputFile
            fi

        # If the file doesn't exist, write the value of
        # arr[n] to the file along with a tab.
        else
            printf "%d\t" ${arr[$n]} >$outputFile
        fi
    done

    cat $outputFile
}

############################################################
#                        METHODS                           #
############################################################
function transpose() {
    # Get dimensions of matrix.
    _getDims $1

    outputFile='out.jgtmp'
    linearInput=()
    linearOutput=()

    # Read each line into an array.
    while read line; do
        for x in $line; do
            linearInput+=($x)
        done
    done <$1

    # Loop over the array doing down each column and appending
    # that value to the output file.

    for ((i = 0; i < $columns; i++)); do                          # This loop keeps track of the column the loop is on.
        for ((n = $i; n < ${#linearInput[@]}; n += $columns)); do # This loop goes down the row within a column.
            linearOutput+=(${linearInput[$n]})
        done
    done

    # Print matrix to the terminal.
    _displayMatrix $rows "${linearOutput[@]}"
}

function dims() {
    fileStats="fileStats-$$.jgtmp"

    # Get row count, word count, and character count of the
    # file and stick it into a test file.
    wc $1 >$fileStats

    # Read the contents of the test file
    read rowCount wordCount rest <$fileStats

    # Calculate the number of columns in the matrix
    columnCount=$(($wordCount / $rowCount))

    # Print it out
    echo $rowCount $columnCount
}

function add() {
    # Get dimensions of both matrices.
    dim1=$(dims $1)
    dim2=$(dims $2)

    # Check if the dimensions are the same.
    if [ "$dim1" != "$dim2" ]; then
        echo "error 3: These are different dimensions." 1>&2
        clearTmp
        exit 6
    fi

    # Get the dimensions of the output matrix.
    dims $1 >"dims-$$.jgtmp"
    read row col <"dims-$$.jgtmp"
    outputCol=$col

    # Init arrays.
    f1Arr=()
    f2Arr=()

    # Loop through each file, reading each line and each element
    # in each line and push them into the appropriate array.
    while read lineFirstFile && read lineSecondFile <&3; do
        for x in $lineFirstFile; do
            f1Arr+=("$x")
        done
        for y in $lineSecondFile; do
            f2Arr+=("$y")
        done
    done <$1 3<$2

    # Once in an array, use an index and add them together into a new
    # array.
    answerArray=()
    for ((i = 0; i < ${#f1Arr[@]}; i++)); do
        answerArray+=($((${f1Arr[$i]} + ${f2Arr[$i]})))
    done

    # Print matrix to the terminal.
    _displayMatrix $outputCol "${answerArray[@]}"

}

function mean() {
    # Get dimensions of matrix.
    _getDims $1

    colTmp="colTmp-$$.jgtmp"
    outputArray=()

    # Loop through the matrix, column by column, calculate the mean
    # of each column, and display it in the terminal.
    for ((i = 0; i < $columns; i++)); do
        index=$(($i + 1))

        # Read each line and cut out a specific column and append
        # that value to the colTmp file.
        while read line; do
            if [[ -f $colTmp ]]; then
                echo $line | cut -d ' ' -f $index >>$colTmp
            else
                echo $line | cut -d ' ' -f $index >$colTmp
            fi
        done <$1

        # Once all values in a column are appended to colTmp, read colTmp,
        # sum the values, and delete colTmp for the next column.
        sum=0
        while read tmpLine; do
            sum=$(($tmpLine + $sum))
        done <$colTmp
        rm -rf $colTmp

        # Use the formula to calculate mean and add it to the outputArray.
        mean=$((($sum + ($rows / 2 * (($sum > 0) * 2 - 1))) / $rows))
        outputArray+=($mean)
    done

    # Print matrix to the terminal.
    _displayMatrix $columns "${outputArray[@]}"
}

function multiply() {
    # Get dimensions of matrix 1
    _getDims $1
    m1Row=$rows
    m1Col=$columns

    # Get dimensions of matrix 2
    _getDims $2
    m2Row=$rows
    m2Col=$columns

    # Check if it is possible to multiply matrices.
    if [ $m1Col != $m2Row ]; then
        echo "Error! These matrices cannot be multiplied. Incorrect dimensions." 1>&2
        clearTmp
        exit 5
    fi

    # Will be an array for the output matrix.
    outputArray=()

    while read line; do

        # For each row in the first matrix, create an array where it's length
        # is equal to the length of the row and where each element is initialized to 0.
        outputRow=()
        for ((i = 0; i < $m2Col; i++)); do
            outputRow+=(0)
        done

        # Place each integer in matrix 1 into an array.
        m1RowArray=()
        for x in $line; do
            m1RowArray+=($x)
        done

        # Linearize matrix 2 into an array from left to right.
        linearM2=()
        while read m2Line; do
            for y in $m2Line; do
                linearM2+=($y)
            done
        done <$2

        # Becuase the second matrix was linearize, rather than calculate
        # (M1Row X M2Column) this loop multiplies each element in each row
        # by the appropriate number in matrix 1 and sums/stores that number
        # in the appropriate index of the ouputRow array.

        # m1RowIndex keeps track of the number in matrix 1 we are evaluating.
        m1RowIndex=0
        for ((index = 0; index < ${#linearM2[@]}; index++)); do
            # outRowIdx keeps track of which index we will be making the calculating.
            outRowIdx=$((index % $m2Col))
            # Increment m1RowIndex once we reach the end of a row.
            if [ $index != 0 ] && [ $outRowIdx == 0 ]; then
                m1RowIndex=$(($m1RowIndex + 1))
            fi

            # Multiply matrix 1 value by matrix 2 value and add it to the running total.
            outputRow[$outRowIdx]=$((${outputRow[$outRowIdx]} + ${m1RowArray[$m1RowIndex]} * ${linearM2[$index]}))
        done

        # Append outputRow to outputArray.
        outputArray=("${outputArray[@]}" "${outputRow[@]}")

    done <$1

    _displayMatrix $m2Col "${outputArray[@]}"
}

# Remove all temp files with my file extension.
function clearTmp() {
    rm -f *.jgtmp
}

############################################################
#                          MAIN                            #
############################################################

# Check if there are any arguments.
if [ $# == 0 ]; then
    echo "Error! No command found. Try transpose, add, dims, mean or multiply." 1>&2
    clearTmp
    exit 1

# If there are arguments, check if it's either add or multiply.
elif [[ $1 == 'add' || $1 == 'multiply' ]]; then

    # Check if there are any more/less arguments than needed.
    if [ $# != 3 ]; then
        echo "Error! Incorrect number of args provided. Ex: ./matrix [command] [file] [file]" 1>&2
        clearTmp
        exit 2

    # Run function if the files are readable.
    elif [ -r $2 ] && [ -r $3 ]; then
        $@

    # Otherwise error out.
    else
        echo "Error! File(s) not readable." 1>&2
        clearTmp
        exit 3
    fi

# If there are arguments, check if it's any of the other commands.
elif [[ $1 == 'dims' || $1 == 'transpose' || $1 == 'mean' ]]; then

    # If a there were no arguments passed to dims/transpose/mean, read from
    # stdin.
    tmp1="stdin-$$.jgtmp"
    if [ $# == 1 ]; then
        cat >$tmp1
        $1 $tmp1
    else

        # Run function if there are the correct number of arguments, there is a file,
        # and that file is readable.
        if [[ $# == 2 && -f "$2" && -r "$2" ]]; then
            $@

        # Otherwise error out.
        else
            echo "Error! File(s) not readable." 1>&2
            clearTmp
            exit 3
        fi
    fi

# If no recognized command is found, error out.
else
    echo "Error! Command not recognized. Try transpose, add, dims, mean or multiply." 1>&2
    clearTmp
    exit 4
fi

# If everything was succuessful, clear out temp files, and exit.
clearTmp
exit 0
